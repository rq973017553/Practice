apply plugin: 'com.android.library'

android {
    compileSdkVersion APP_COMPILE_SDK_VERSION as int

    defaultConfig {
        minSdkVersion APP_MIN_SDK_VERSION as int
        targetSdkVersion APP_TARGET_SDK_VERSION as int
        versionCode APP_VERSION_CODE as int
        versionName APP_VERSION_NAME

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        externalNativeBuild {
            cmake {
                // Passes optional arguments to CMake.
                arguments "-DANDROID_ARM_NEON=TRUE", "-DANDROID_TOOLCHAIN=clang"
                // Sets optional flags for the C compiler.
                cFlags "-D_EXAMPLE_C_FLAG1", "-D_EXAMPLE_C_FLAG2"
                // Sets a flag to enable format macro constants for the C++ compiler.
                cppFlags "-D__STDC_FORMAT_MACROS"
                //生成.so库的目标平台
                abiFilters 'x86', 'x86_64', 'armeabi', 'armeabi-v7a',
                        'arm64-v8a'
            }
        }
    }

//    packagingOptions {//如果你想把生成的so文件放到jniLibs中，请加上这些代码，可是这样将可能导致apk中没有so文件
//        exclude 'lib/arm64-v8a/libhello-lib.so'
//        exclude 'lib/x86/libhello-lib.so'
//        exclude 'lib/x86_64/libhello-lib.so'
//        exclude 'lib/armeabi/libhello-lib.so'
//        exclude 'lib/armeabi-v7a/libhello-lib.so'
//    }

    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'

    implementation android_support.appcompat_v7
}
